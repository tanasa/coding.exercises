# -*- coding: utf-8 -*-

"""roche3.ipynb

Automatically generated by Colab.
Original file is located at : 
https://colab.research.google.com/drive/13Esjg9w04E4mO_eiCfI6bEG-ocp3ajmQ

"""

def add_two_numbers_to_a_target(nums, target):

    # Maintain a dictionary (complement_dictionary) where each key is a number from the list, and its value is the index of that number.
    # It allows us to quickly check if the required complement for the current number is already in the dictionary.

    # The complement is a number that is needed to reach the target.

    # An empty dictionary
    complement_dictionary = {}

    for i, num in enumerate(nums):

        complement = target - num

        # Check if this complement is already in the dictionary

        if complement in complement_dictionary:

            # If it is found, we return the indices
            return [complement_dictionary[complement], i]

        # If the complement is not in the dictionary, we store the index of the current number in the dictionary
        complement_dictionary[num] = i

    # If no valid pairs are found, we return "None"
    return None

# "Here it is an example with explanations

nums = [2, 7, 11, 15, 9]
target = 11
example = add_two_numbers_to_a_target(nums, target)
print("The indices are:", example)


"""
To find two indices in a list that store two numbers that add up to a specific target value using the complement method, 
we can efficiently achieve this with a single pass through the list using a dictionary to track the required complements.
"""

"""
Summary of Execution

Initial State:
complement_dictionary = {}

First Iteration:

i = 0
num = 2
complement = 9
complement_map = {2: 0}

Second Iteration:

i = 1
num = 7
complement = 4
complement_map = {2: 0, 7: 1}

Third Iteration:

i = 2
num = 11
complement = 0
complement_map = {2: 0, 7: 1, 11: 2}

Fourth Iteration:

i = 3
num = 15
complement = -4
complement_map = {2: 0, 7: 1, 11: 2, 15: 3}

Fifth Iteration:

i = 4
num = 9
complement = 2
complement_map = {2: 0, 7: 1, 11: 2, 15: 3}

Found Pair: [0, 4]
"""